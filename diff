class mysql_server_config {
  # Set the MySQL root password
  exec { 'mysql_root_password':
    command => "/usr/bin/mysqladmin -u root password '${var.mysql_root_password}'",
    onlyif  => "/usr/bin/mysql -u root -e 'show databases;'",
    path    => ['/usr/bin', '/bin'],
  }

  # Set the MySQL bind address to listen on all interfaces
  file_line { 'mysql_bind_address':
    path  => '/etc/mysql/my.cnf',
    line  => 'bind-address = 0.0.0.0',
    match => '^bind-address\s*=',
  }

  # Restart the MySQL service after configuration changes
  service { 'mysql':
    ensure     => 'running',
    enable     => true,
    hasrestart => true,
    subscribe  => [ File_line['mysql_bind_address'], Exec['mysql_root_password'] ],
  }
}


{"Freeze Period":{"start":"2023-03-17T00:00:00+08:00","end":"2023-03-18T00:00:00+08:00"}}
ghp_OHu7DUj4O5yoEJUhMBUkPjp1Oco6Kn0VlXot
sudo docker run -d -it -h "puppetclient.localdomain" --add-host puppetmaster:172.17.0.1 --add-host puppet:172.17.0.1 --add-host puppetclient:172.17.0.3 --privileged --name puppetclient puppetclient /sbin/init

# Install nginx package
   package { 'nginx':  ensure => installed, } 
   
# Configure nginx to serve index.html
   file { '/etc/nginx/sites-available/default':  ensure  => present, 
   content => "# Default server configuration\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 
   default_server;\n\n\troot /var/www/html;\n\tindex index.html;\n\n\tserver_name _;\n\n\tlocation / {\n\t\ttry_files
   $uri $uri/ =404;\n\t}\n}\n",
   notify  => Service['nginx'], } 
   
 # Create index.html with "Hello DV1C04!" 
   content file { '/var/www/html/index.html':  ensure  => present,
   content => "Hello DV1C04!", 
   notify  => Service['nginx'], } 
   
 # Start nginx service
  service { 'nginx':  
  ensure => running,  
  enable => true, 
  }
  } 
  
 # Apply the nginx_hello class to the node
 
  node 'your_node_name' {
  include nginx_hello
  }


class apache {
 package { 'http':
   ensure => installed,
 }
 
 file{'/etc/httpd/conf/httpd.conf':
   source => 'puppet:///modules/apache/httpd.conf',
   require => Package['httpd'],
 }
 
 
 service { httpd:
  ensure => running,
  enable => true,
  require => File['/etc/httpd/conf/httpd.conf'],
  }
  
  class message {
  $message = ''

  file { 'tmp':
    ensure => directory,
  }

  file { '/tmp/message.txt':
    ensure  => file,
    content => epp("myXXXXXXXX/messageXXXXXXXX.epp", {'input_message' => $message}),
  }
}
