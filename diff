   
   docker run -d --network customnetwork --privileged -h "puppetclient.localdomain" --name websvr_21050462 --add-host "sddo-vm:172.20.113.210" --ip "192.168.100.200" puppetclient-image /sbin/init 
   ghp_3eEXgknuvEJpjaqnvyU95O8h14Vi4b05vwo
   d   
   
   define command {
    command_name	check_remote_load
    command_line		/usr/bin/ssh $HOSTADDRESS$ $USER1$/check_load -w $ARG1$ -c $ARG2$
}

   
   
 cd /tmp
 wget --no-check-certificate -O nagios-plugins.tar.gz https://nagios-plugins.org/download/nagios-plugins-2.3.3.tar.gz

ls -lrt
tar zxf nagios-plugins.tar.gz 
ls -lrt
cd nagios-plugins
cd nagios-plugins-2.3.3/
sudo ./configure
ls
cd ./config
ls -lrt
./config
pwd
./tools/setup
ls -lrt
cd tools
ls
cd ..
pwd
ls -lrt
apt update
apt-get install -y autoconf gcc libc6 make wget unzip libgd-dev
./configure
make
make install
cd /usr/local/
cd nagios/
ls
cd libexec/




docker run -d --privileged -h "apacheweb.localdomain" --name apacheweb --add-host "sddo-vm.localdomain:172.20.115.181" --ip "192.168.100.11" -e TZ=SGT -p 8011:80 ubuntu/apache2:latest

docker run -d --privileged -h "postgresdb.localdomain" --name postgredb --add-host "sddo-vm.localdomain:172.20.115.181" --ip "192.168.100.12" -e TZ=SGT -p  30432:5432 -e POSTGRES_HOST_AUTH_METHOD=trust ubuntu/postgres
class mymodule {file { '/home/ubuntu':
        ensure => directory,
        owner => 'ubuntu',
        group => 'ubuntu',
    }file { "/home/ubuntu/test.txt":
        mode => "0644",
        owner => 'ubuntu',
        group => 'ubuntu',
        source => 'puppet:///modules/mymodule/test.txt',
    }
}
class moveFile {
        file { '/home/22050108':
        ensure => directory,
        owner => 'nicholas',
        group => 'nicholas',
    }
   
        file { "/home/22050108/moveFile22050108.txt":
        mode => "0644",
        owner => 'nicholas',
        group => 'nicholas',
        source => 'puppet:///modules/moveFile/moveFile22050108.txt',
    }
}

class apache {
 package { 'http':
   ensure => installed,
 }
 
 file{'/etc/httpd/conf/httpd.conf':
   source => 'puppet:///modules/apache/httpd.conf',
   require => Package['httpd'],
 }
 
 
 service { httpd:
  ensure => running,
  enable => true,
  require => File['/etc/httpd/conf/httpd.conf'],
  }
class mysql_server_config {
  # Set the MySQL root password
  mysql_user { 'root@localhost':
    ensure                   => present,
    password_hash            => mysql_password(var.mysql_root_password),
    grant                     => ['ALL'],
    options                   => ['GRANT'],
  }

  # Set the MySQL bind address to listen on all interfaces
  ini_setting { 'mysql_bind_address':
    ensure  => present,
    path    => '/etc/mysql/my.cnf',
    section => 'mysqld',
    setting => 'bind-address',
    value   => '0.0.0.0',
  }

  # Restart the MySQL service after configuration changes
  service { 'mysql':
    ensure     => 'running',
    enable     => true,
    hasrestart => true,
    subscribe  => [ Ini_setting['mysql_bind_address'], Mysql_user['root@localhost'] ],
  }
}


{"Freeze Period":{"start":"2023-03-17T00:00:00+08:00","end":"2023-03-18T00:00:00+08:00"}}
ghp_OHu7DUj4O5yoEJUhMBUkPjp1Oco6Kn0VlXot
sudo docker run -d -it -h "puppetclient.localdomain" --add-host puppetmaster:172.17.0.1 --add-host puppet:172.17.0.1 --add-host puppetclient:172.17.0.3 --privileged --name puppetclient puppetclient /sbin/init

# Install nginx package
   package { 'nginx':  ensure => installed, } 
   
# Configure nginx to serve index.html
   file { '/etc/nginx/sites-available/default':  ensure  => present, 
   content => "# Default server configuration\nserver {\n\tlisten 80 default_server;\n\tlisten [::]:80 
   default_server;\n\n\troot /var/www/html;\n\tindex index.html;\n\n\tserver_name _;\n\n\tlocation / {\n\t\ttry_files
   $uri $uri/ =404;\n\t}\n}\n",
   notify  => Service['nginx'], } 
   
 # Create index.html with "Hello DV1C04!" 
   content file { '/var/www/html/index.html':  ensure  => present,
   content => "Hello DV1C04!", 
   notify  => Service['nginx'], } 
   
 # Start nginx service
  service { 'nginx':  
  ensure => running,  
  enable => true, 
  }
  } 
  
 # Apply the nginx_hello class to the node
 
  node 'your_node_name' {
  include nginx_hello
  }


class apache {
 package { 'http':
   ensure => installed,
 }
 
 file{'/etc/httpd/conf/httpd.conf':
   source => 'puppet:///modules/apache/httpd.conf',
   require => Package['httpd'],
 }
 
 
 service { httpd:
  ensure => running,
  enable => true,
  require => File['/etc/httpd/conf/httpd.conf'],
  }
  
  class message {
  $message = ''

  file { 'tmp':
    ensure => directory,
  }

  file { '/tmp/message.txt':
    ensure  => file,
    content => epp("myXXXXXXXX/messageXXXXXXXX.epp", {'input_message' => $message}),
  }
}
